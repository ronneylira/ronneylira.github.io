<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Roslyn on Ronney Lira</title>
    <link>https://ronneylira.com/tags/roslyn/</link>
    <description>Recent content in Roslyn on Ronney Lira</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 06 Mar 2024 10:21:39 +0100</lastBuildDate>
    <atom:link href="https://ronneylira.com/tags/roslyn/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Build Performance With Roslyn</title>
      <link>https://ronneylira.com/posts/build-performance-roslyn/</link>
      <pubDate>Wed, 06 Mar 2024 10:21:39 +0100</pubDate>
      <guid>https://ronneylira.com/posts/build-performance-roslyn/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://learn.microsoft.com/en-us/dotnet/csharp/roslyn-sdk/&#34;&gt;Roslyn&lt;/a&gt; has been kicking around for a couple of years now, and it&amp;rsquo;s got some seriously cool tricks up its sleeve for how you build and keep your code in line.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m blown away by how these new goodies with .NET aren&amp;rsquo;t just for the new stack (you know, dotnet core and all that jazz), but they&amp;rsquo;re also giving a boost to the old classics we still rely on.&lt;/p&gt;
&lt;p&gt;In my current company, we&amp;rsquo;ve got a monolithic app that&amp;rsquo;s a real time hog. It takes a solid 15s to clean, a painful 80s to build, and a whopping 5 minutes to load up for the first time in many of the developer&amp;rsquo;s laptops. And that&amp;rsquo;s not just because the solution&amp;rsquo;s a beast â€“ it&amp;rsquo;s all the dependencies, caching, and ASP.NET doing its runtime compiling too. Talk about putting a damper on the whole code-test-run cycle ðŸ˜°.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
