[{"content":"In this article, I\u0026rsquo;m going to cover the complete setup for GPG commit signing on Windows, including the wrapper script solution that actually works.\nI really love seeing those green \u0026ldquo;Verified\u0026rdquo; badges next to commits on GitHub. There\u0026rsquo;s something satisfying about cryptographic proof that your code actually came from you. But if you\u0026rsquo;ve tried setting up GPG commit signing on Windows, you\u0026rsquo;ve probably run into the same frustrating issues I did - Git can\u0026rsquo;t find your GPG key even though gpg --list-keys works perfectly fine in your terminal.\nI spent hours troubleshooting keyboxd daemon conflicts, lockfile errors, and environment variable mismatches between PowerShell and Git\u0026rsquo;s execution context. The usual guides just tell you to install GPG4Win and configure a few settings, but they completely miss the critical environment issues that make it fail on Windows.\nOnce you get the setup right, though, it becomes a seamless part of your workflow. Every commit gets automatically signed, and you never have to think about it again.\nWhy Bother with GPG Signing? GPG signing provides cryptographic proof that commits actually came from you. It\u0026rsquo;s particularly valuable when you\u0026rsquo;re contributing to open source projects where maintainers need to verify authentic contributions, or in enterprise environments that require signed commits for security compliance.\nBut honestly, I just like those green verified badges. They look professional.\nThe Real Problem on Windows The main issue is that Git for Windows and GPG4Win don\u0026rsquo;t talk to each other properly. You\u0026rsquo;ll install both, generate a key, configure Git, and then get hit with \u0026ldquo;No secret key\u0026rdquo; errors even though GPG works fine when you test it directly.\nThe root cause is environment variables. Git runs GPG in a different context than your PowerShell session, with different paths and missing environment variables. Most guides don\u0026rsquo;t address this fundamental issue.\nThe Working Solution Here\u0026rsquo;s what actually works. I\u0026rsquo;m going to walk you through the exact steps I use on every fresh Windows install.\nStep 1: Install the Software Download and install Git for Windows and GPG4Win with default settings.\nVerify they\u0026rsquo;re working:\ngit --version gpg --version Step 2: Generate Your GPG Key gpg --full-generate-key Choose RSA and RSA, 4096 bits, set your expiration preference, and use the same email as your GitHub account. Create a strong passphrase.\nStep 3: Get Your Key ID and Export for GitHub gpg --list-secret-keys --keyid-format=long Note the key ID after the / on the sec line. Then export your public key:\ngpg --armor --export YOUR_KEY_ID Copy the entire output and add it to GitHub under Settings â†’ SSH and GPG keys â†’ New GPG key.\nStep 4: The Magic Wrapper Script This is the part that most guides miss. Create this wrapper script to fix the environment issues:\nNew-Item -ItemType Directory -Force -Path C:\\temp @\u0026#39; @echo off set GNUPGHOME=%USERPROFILE%\\AppData\\Roaming\\gnupg set GPG_TTY=CON set GPG_AGENT_INFO= set GPGCONF= set GPG_AGENT_PROGRAM=\u0026#34;%ProgramFiles(x86)%\\GnuPG\\bin\\gpg-agent.exe\u0026#34; rem Clean up any lockfiles del \u0026#34;%GNUPGHOME%\\*.lock\u0026#34; \u0026gt;nul 2\u0026gt;\u0026amp;1 rem Force use Windows GPG agent set PATH=%ProgramFiles(x86)%\\GnuPG\\bin;%PATH% gpg.exe %* \u0026#39;@ | Out-File -FilePath C:\\temp\\git-gpg-wrapper.bat -Encoding ASCII -Force Step 5: Configure Git git config --global user.name \u0026#34;Your Name\u0026#34; git config --global user.email \u0026#34;your.email@example.com\u0026#34; git config --global gpg.program \u0026#34;C:\\temp\\git-gpg-wrapper.bat\u0026#34; git config --global user.signingkey YOUR_SHORT_KEY_ID git config --global gpg.format openpgp git config --global commit.gpgsign true Replace YOUR_SHORT_KEY_ID with your actual short key ID.\nStep 6: Test It mkdir test-repo cd test-repo git init git commit --allow-empty -S -m \u0026#34;Test signed commit\u0026#34; If you see a commit hash without errors, you\u0026rsquo;re golden.\nWhy This Actually Works The wrapper script solves four critical problems:\nSets GNUPGHOME correctly for Git\u0026rsquo;s execution context Points to the Windows GPG agent instead of trying Linux paths Cleans up lockfiles that cause signing failures Ensures the right PATH ordering so Git finds the correct GPG Without this wrapper, Git runs GPG in an environment that can\u0026rsquo;t find your keys, even though they exist and work fine in your normal shell.\nTroubleshooting If you get \u0026ldquo;No secret key\u0026rdquo; errors, double-check your key ID:\ngit config --global user.signingkey gpg --list-secret-keys --keyid-format=long Make sure they match exactly.\nFor lockfile errors, clean up manually:\nRemove-Item -Path \u0026#34;$env:USERPROFILE\\AppData\\Roaming\\gnupg\\*.lock\u0026#34; -Force -ErrorAction SilentlyContinue If the GPG agent won\u0026rsquo;t start:\ngpg-connect-agent killagent /bye gpg-connect-agent /bye Bonus: Quick Setup Script Here\u0026rsquo;s a PowerShell script that automates most of the setup:\nparam( [Parameter(Mandatory=$true)] [string]$Name, [Parameter(Mandatory=$true)] [string]$Email ) New-Item -ItemType Directory -Force -Path C:\\temp @\u0026#39; @echo off set GNUPGHOME=%USERPROFILE%\\AppData\\Roaming\\gnupg set GPG_TTY=CON set GPG_AGENT_INFO= set GPGCONF= set GPG_AGENT_PROGRAM=\u0026#34;%ProgramFiles(x86)%\\GnuPG\\bin\\gpg-agent.exe\u0026#34; del \u0026#34;%GNUPGHOME%\\*.lock\u0026#34; \u0026gt;nul 2\u0026gt;\u0026amp;1 set PATH=%ProgramFiles(x86)%\\GnuPG\\bin;%PATH% gpg.exe %* \u0026#39;@ | Out-File -FilePath C:\\temp\\git-gpg-wrapper.bat -Encoding ASCII -Force git config --global user.name $Name git config --global user.email $Email git config --global gpg.program \u0026#34;C:\\temp\\git-gpg-wrapper.bat\u0026#34; git config --global gpg.format openpgp Write-Host \u0026#34;Setup complete! Now run \u0026#39;gpg --full-generate-key\u0026#39; to create your key.\u0026#34; Write-Host \u0026#34;Then set your signing key with: git config --global user.signingkey YOUR_KEY_ID\u0026#34; Save as setup-gpg.ps1 and run:\n.\\setup-gpg.ps1 -Name \u0026#34;Your Name\u0026#34; -Email \u0026#34;your.email@example.com\u0026#34; Just remember to keep that wrapper script at C:\\temp\\git-gpg-wrapper.bat - Git depends on it. If you reinstall GPG4Win, you might need to recreate it.\nFor today that\u0026rsquo;s it. Thanks for reading, and enjoy your verified commits!\n","permalink":"https://ronneylira.com/posts/2025-09-10-github-sign-commits-windows/","summary":"\u003cp\u003eIn this article, I\u0026rsquo;m going to cover the complete setup for GPG commit signing on Windows, including the wrapper script solution that actually works.\u003c/p\u003e\n\u003cp\u003eI really love seeing those green \u0026ldquo;Verified\u0026rdquo; badges next to commits on GitHub. There\u0026rsquo;s something satisfying about cryptographic proof that your code actually came from you. But if you\u0026rsquo;ve tried setting up GPG commit signing on Windows, you\u0026rsquo;ve probably run into the same frustrating issues I did - Git can\u0026rsquo;t find your GPG key even though \u003ccode\u003egpg --list-keys\u003c/code\u003e works perfectly fine in your terminal.\u003c/p\u003e","title":"Getting Those Green Verified Badges: GPG Commit Signing on Windows That Actually Works"},{"content":"Roslyn has been kicking around for a couple of years now, and it\u0026rsquo;s got some seriously cool tricks up its sleeve for how you build and keep your code in line.\nI\u0026rsquo;m blown away by how these new goodies with .NET aren\u0026rsquo;t just for the new stack (you know, dotnet core and all that jazz), but they\u0026rsquo;re also giving a boost to the old classics we still rely on.\nIn my current company, we\u0026rsquo;ve got a monolithic app that\u0026rsquo;s a real time hog. It takes a solid 15s to clean, a painful 80s to build, and a whopping 5 minutes to load up for the first time in many of the developer\u0026rsquo;s laptops. And that\u0026rsquo;s not just because the solution\u0026rsquo;s a beast â€“ it\u0026rsquo;s all the dependencies, caching, and ASP.NET doing its runtime compiling too. Talk about putting a damper on the whole code-test-run cycle ðŸ˜°.\nSo a few months back, I decided to take matters into my own hands and give our project a bit of a boost with the latest version of the DotnetCompilerPlatform. After diving into the docs, the plan was simple: slap on the packages, give it a whirl around the office, and see what shakes out.\nWe had to do a bit of tinkering in Visual Studio (grabbed the .NET Compiler Platform SDK \u0026amp; C# and Visual Basic Roslyn compilers), and then got to work installing the DotnetCompilerPlatform NuGet package in our projects.\nThe initial results on my machine were pretty promising: build time went from 80s to 74s (not earth-shattering, but hey, progress!), and that agonizing first page load time went from 5 minutes to a much more manageable 2 minutes.\nI roped in some of my colleagues to test out the new setup on their laptops, and the numbers were eye-opening:\nOn average, build time is about 1.04x faster, and that dreaded first page load? A whopping 2.6x speed boost.\nTalk about a game-changer. My only regret? Not jumping on this bandwagon sooner.\n","permalink":"https://ronneylira.com/posts/build-performance-roslyn/","summary":"\u003cp\u003e\u003ca href=\"https://learn.microsoft.com/en-us/dotnet/csharp/roslyn-sdk/\"\u003eRoslyn\u003c/a\u003e has been kicking around for a couple of years now, and it\u0026rsquo;s got some seriously cool tricks up its sleeve for how you build and keep your code in line.\u003c/p\u003e\n\u003cp\u003eI\u0026rsquo;m blown away by how these new goodies with .NET aren\u0026rsquo;t just for the new stack (you know, dotnet core and all that jazz), but they\u0026rsquo;re also giving a boost to the old classics we still rely on.\u003c/p\u003e\n\u003cp\u003eIn my current company, we\u0026rsquo;ve got a monolithic app that\u0026rsquo;s a real time hog. It takes a solid 15s to clean, a painful 80s to build, and a whopping 5 minutes to load up for the first time in many of the developer\u0026rsquo;s laptops. And that\u0026rsquo;s not just because the solution\u0026rsquo;s a beast â€“ it\u0026rsquo;s all the dependencies, caching, and ASP.NET doing its runtime compiling too. Talk about putting a damper on the whole code-test-run cycle ðŸ˜°.\u003c/p\u003e","title":"Build Performance With Roslyn"},{"content":"I\u0026rsquo;ve put in some effort in recent months to remove secrets from multiple legacy code bases. That was the easy part, the though part is to change culture to prevent new secrets from leaking into the codebase in the future.\nLuckily there are tools to help out with that: Gitleaks was a cool finding. It helps to find secrets before you commit them using different regular expressions that you can also extend.\nYou can plug it into your pipelines when validating a PR in my case Azure and Github, or even better as a pre-commit git hook\nAfter that you don\u0026rsquo;t need to worry about any secrets in your source code.\n","permalink":"https://ronneylira.com/posts/gitleaks/","summary":"\u003cp\u003eI\u0026rsquo;ve put in some effort in recent months to remove secrets from multiple legacy code bases. That was the easy part, the though part is to change culture to prevent new secrets from leaking into the codebase in the future.\u003c/p\u003e\n\u003cp\u003eLuckily there are tools to help out with that: \u003ca href=\"https://github.com/gitleaks/gitleaks\"\u003eGitleaks\u003c/a\u003e was a cool finding. It helps to find secrets before you commit them using different regular expressions that you can also extend.\u003c/p\u003e","title":"Gitleaks"},{"content":"For a long time, our company relied on MyGet as our private package repository. However, a recent outage caused a 24-hour delay in our work, so we\u0026rsquo;ve decided to stop using MyGet and switch to GitHub Artifacts as our new provider.\nThis situation presented us with an excellent chance to enhance the quality of our pipelines by implementing some standard tools and protecting us from the risks associated with broad access to these resources.\nOne of the steps we took was transitioning from Azure DevOps classic pipelines to reusable YAML pipelines. However, a challenge arose when these new pipelines, which were responsible for building NuGet packages, began to encounter an error that we couldn\u0026rsquo;t replicate either locally or in the old pipelines.\nBuild FAILED. \u0026#34;/home/vsts/work/1/s/NewPackage/NewPackage.csproj\u0026#34; (pack target) (1:7) -\u0026gt; (GenerateNuspec target) -\u0026gt; /opt/hostedtoolcache/dotnet/sdk/6.0.416/Sdks/NuGet.Build.Tasks.Pack/build/NuGet.Build.Tasks.Pack.targets(221,5): error NU5026: The file \u0026#39;/home/vsts/work/1/s/NewPackage/bin/Debug/netstandard2.0/NewPackage.dll\u0026#39; to be packed was not found on disk. [/home/vsts/work/1/s/NewPackage/NewPackage.csproj] 0 Warning(s) 1 Error(s) After several rounds of testing and investigation, we successfully identified the root cause. In the .csproj file, we had previously set a useful flag that generated the package during the build process:\n\u0026lt;GeneratePackageOnBuild\u0026gt;true\u0026lt;/GeneratePackageOnBuild\u0026gt; this is being tracked in an issue in the dotnet sdk repo.\nTo avoid package generation in the classic pipelines, we had decided to perform it during the build process. However, with a dedicated pack task, this approach was not functioning as anticipated. So, we removed the tag, and voilÃ , it\u0026rsquo;s now packing correctly.\nAs we adapt and grow, we continually discover new solutions and uncover unexpected challenges. Remember, every obstacle presents an opportunity for growth and improvement. I hope this post helps you.\n","permalink":"https://ronneylira.com/posts/nu5025-error-the-file-to-be-packed-was-not-found-on-disk/","summary":"\u003cp\u003eFor a long time, our company relied on MyGet as our private package repository. However, a recent outage caused a 24-hour delay in our work, so we\u0026rsquo;ve decided to stop using MyGet and switch to GitHub Artifacts as our new provider.\u003c/p\u003e\n\u003cp\u003eThis situation presented us with an excellent chance to enhance the quality of our pipelines by implementing some standard tools and protecting us from the risks associated with broad access to these resources.\u003c/p\u003e","title":"NU5026: The file to be packed was not found on disk"},{"content":"In this article, we\u0026rsquo;ll explore a handy trick that can make your development journey more enjoyable. We\u0026rsquo;re here to share some knowledge and help you understand a clever coding strategy.\nAzure and Dotnet make a fantastic team, offering a bunch of powerful tools that work seamlessly together, making your coding adventures smoother. Today, we\u0026rsquo;re diving into the world of Azure AD\u0026rsquo;s authentication system, which can make switching between development and production modes a breeze.\nMuch of this code can readily be found online in documentation and code samples. Because these solutions often \u0026lsquo;just work,\u0026rsquo; it\u0026rsquo;s tempting to fall into the trap of not exploring further to see how they can be enhanced.\nOne of the areas where you can quickly gain traction through online research is setting up Azure services like Key Vault and App Configuration. Typically, you would come across the following configuration:\nusing Azure.Identity; var builder = WebApplication.CreateBuilder(args); if (builder.Environment.IsProduction()) { builder.Configuration.AddAzureKeyVault( new Uri($\u0026#34;https://{builder.Configuration[\u0026#34;KeyVaultName\u0026#34;]}.vault.azure.net/\u0026#34;), new DefaultAzureCredential()); } Now, this is how long the service will take for your service to startup while using the DefaultAzureCredential the DefaultAzureCredential is like your trusty friend, trying out different ways to get you logged in, step by step:\nEnvironmentCredential WorkloadIdentityCredential ManagedIdentityCredential SharedTokenCacheCredential VisualStudioCredential VisualStudioCodeCredential AzureCliCredential AzurePowerShellCredential AzureDeveloperCliCredential InteractiveBrowserCredential But here\u0026rsquo;s the fun part: when you\u0026rsquo;re in development mode (imagine using Azure CLI), it goes through a bit of a treasure hunt, trying out six different methods before it gets there.\nNow, here\u0026rsquo;s where you get to be in charge! Think of it as creating your own playlist of favorite songs. That\u0026rsquo;s what the ChainedTokenCredential lets you do. Check this out:\nusing Azure.Identity; var builder = WebApplication.CreateBuilder(args); if (builder.Environment.IsProduction()) { builder.Configuration.AddAzureKeyVault( new Uri($\u0026#34;https://{builder.Configuration[\u0026#34;KeyVaultName\u0026#34;]}.vault.azure.net/\u0026#34;), new ChainedTokenCredential(new AzureCliCredential(), new DefaultAzureCredential())); } In this setup, we give the Azure CLI credential the spotlight first, and then the other methods follow suit. You can customize it to your heart\u0026rsquo;s content, maybe put ManagedIdentityCredential in the lead (because it\u0026rsquo;s the star in production) or mix things up for different situations. The result? Your project starts up almost a third faster! So there you have it â€“ a friendly tip to make your development journey smoother and more efficient. Ready to give it a try? ðŸ˜ŠðŸš€ðŸ’»\n","permalink":"https://ronneylira.com/posts/chained-token-credential/","summary":"\u003cp\u003eIn this article, we\u0026rsquo;ll explore a handy trick that can make your development journey more enjoyable. We\u0026rsquo;re here to share some knowledge and help you understand a clever coding strategy.\u003c/p\u003e\n\u003cp\u003eAzure and Dotnet make a fantastic team, offering a bunch of powerful tools that work seamlessly together, making your coding adventures smoother. Today, we\u0026rsquo;re diving into the world of Azure AD\u0026rsquo;s authentication system, which can make switching between development and production modes a breeze.\u003c/p\u003e","title":"Chained Token Credential"},{"content":"In this article, I\u0026rsquo;m going to cover handy shortcuts that can make your life in using git in the terminal faster and more convenient.\nI really love using Windows Terminal, it allows you to use any type of shell that you want, customize it, and extend it to the limit of your own imagination. I cannot recommend enough the great article from Scott Hanselman that teaches you how to unlock most of the potential within Windows Terminal, really making it your own.\nOnce you get used to working with the terminal is pretty hard to go back, the speed at which you are used to writing the commands and your own shortcuts make it a flow-like experience to daily work.\nA few of the things that can help you with your daily work are git shortcuts\n#git shortcuts Git shortcuts are just another name for the git configuration file, this being a global git config setup that essentially dictates how git should behave on your dev box.\nthe only thing you need to get started is to open your terminal and type in a command like this one\ngit config --global alias.co checkout this will append a configuration setting in your .git config file and will allow you to replace the ol'\ngit checkout BRANCH_NAME for a simpler\ngit co BRANCH_NAME that might seem small, but you are saving 6 characters multiple times a day. Measure that in a year, or even your professional life.\nlikewise, other commands can be simplified. Here is a list of the ones I use:\nto create a branch git config --global alias.br branch to commit git config --global alias.ci commit to review your current status git config --global alias.st status to check the last commit git config --global alias.last \u0026#39;log -1 HEAD\u0026#39; to cherry-pick a commit\ngit config --global alias.cp cherry-pick if you also unlock the power of WSL you can extend git (and Windows for that matter) with the help of Linux commands and applications in one seamless shortcut:\nto prune and delete old local branches git config --global alias.purge \u0026#39;!git fetch -p \u0026amp;\u0026amp; git branch -vv | awk \u0026#34;/: gone]/{print \\$1}\u0026#34; | xargs git branch -d\u0026#39; with the help of this shortcut\ngit prune you automatically fetch and prune remote branches, list them, send it to Linux\u0026rsquo;s awk to filter out only the pruned ones, and then feed those to the delete command.\njust make sure that you have git, wsl, and a distro with awk installed in your box to make use of this shortcut.\nfor today that\u0026rsquo;s it. thanks for reading.\n","permalink":"https://ronneylira.com/posts/git-shortcuts/","summary":"\u003cp\u003eIn this article, I\u0026rsquo;m going to cover handy shortcuts that can make your life in using git in the terminal faster and more convenient.\u003c/p\u003e\n\u003cp\u003eI really love using \u003ca href=\"https://github.com/microsoft/terminal\"\u003eWindows Terminal\u003c/a\u003e, it allows you to use any type of shell that you want, \u003ca href=\"https://ohmyposh.dev/\"\u003ecustomize\u003c/a\u003e it, and \u003ca href=\"https://github.com/PowerShell/PSReadLine\"\u003eextend it\u003c/a\u003e to the limit of your own imagination. I cannot recommend enough the great article from \u003ca href=\"https://www.hanselman.com/blog/my-ultimate-powershell-prompt-with-oh-my-posh-and-the-windows-terminal\"\u003eScott Hanselman\u003c/a\u003e that teaches you how to unlock most of the potential within Windows Terminal, really making it your own.\u003c/p\u003e","title":"Git Shortcuts"}]