[{"content":"I\u0026rsquo;ve put in some effort in recent months to remove secrets from multiple legacy code bases. That was the easy part, the though part is to change culture to prevent new secrets from leaking into the codebase in the future.\nLuckily there are tools to help out with that: Gitleaks was a cool finding. It helps to find secrets before you commit them using different regular expressions that you can also extend.\nYou can plug it into your pipelines when validating a PR in my case Azure and Github, or even better as a pre-commit git hook\nAfter that you don\u0026rsquo;t need to worry about any secrets in your source code.\n","permalink":"https://ronneylira.com/posts/gitleaks/","summary":"I\u0026rsquo;ve put in some effort in recent months to remove secrets from multiple legacy code bases. That was the easy part, the though part is to change culture to prevent new secrets from leaking into the codebase in the future.\nLuckily there are tools to help out with that: Gitleaks was a cool finding. It helps to find secrets before you commit them using different regular expressions that you can also extend.","title":"Gitleaks"},{"content":"For a long time, our company relied on MyGet as our private package repository. However, a recent outage caused a 24-hour delay in our work, so we\u0026rsquo;ve decided to stop using MyGet and switch to GitHub Artifacts as our new provider.\nThis situation presented us with an excellent chance to enhance the quality of our pipelines by implementing some standard tools and protecting us from the risks associated with broad access to these resources.\nOne of the steps we took was transitioning from Azure DevOps classic pipelines to reusable YAML pipelines. However, a challenge arose when these new pipelines, which were responsible for building NuGet packages, began to encounter an error that we couldn\u0026rsquo;t replicate either locally or in the old pipelines.\nBuild FAILED. \u0026#34;/home/vsts/work/1/s/NewPackage/NewPackage.csproj\u0026#34; (pack target) (1:7) -\u0026gt; (GenerateNuspec target) -\u0026gt; /opt/hostedtoolcache/dotnet/sdk/6.0.416/Sdks/NuGet.Build.Tasks.Pack/build/NuGet.Build.Tasks.Pack.targets(221,5): error NU5026: The file \u0026#39;/home/vsts/work/1/s/NewPackage/bin/Debug/netstandard2.0/NewPackage.dll\u0026#39; to be packed was not found on disk. [/home/vsts/work/1/s/NewPackage/NewPackage.csproj] 0 Warning(s) 1 Error(s) After several rounds of testing and investigation, we successfully identified the root cause. In the .csproj file, we had previously set a useful flag that generated the package during the build process:\n\u0026lt;GeneratePackageOnBuild\u0026gt;true\u0026lt;/GeneratePackageOnBuild\u0026gt; this is being tracked in an issue in the dotnet sdk repo.\nTo avoid package generation in the classic pipelines, we had decided to perform it during the build process. However, with a dedicated pack task, this approach was not functioning as anticipated. So, we removed the tag, and voilÃ , it\u0026rsquo;s now packing correctly.\nAs we adapt and grow, we continually discover new solutions and uncover unexpected challenges. Remember, every obstacle presents an opportunity for growth and improvement. I hope this post helps you.\n","permalink":"https://ronneylira.com/posts/nu5025-error-the-file-to-be-packed-was-not-found-on-disk/","summary":"For a long time, our company relied on MyGet as our private package repository. However, a recent outage caused a 24-hour delay in our work, so we\u0026rsquo;ve decided to stop using MyGet and switch to GitHub Artifacts as our new provider.\nThis situation presented us with an excellent chance to enhance the quality of our pipelines by implementing some standard tools and protecting us from the risks associated with broad access to these resources.","title":"NU5026: The file to be packed was not found on disk"},{"content":"In this article, we\u0026rsquo;ll explore a handy trick that can make your development journey more enjoyable. We\u0026rsquo;re here to share some knowledge and help you understand a clever coding strategy.\nAzure and Dotnet make a fantastic team, offering a bunch of powerful tools that work seamlessly together, making your coding adventures smoother. Today, we\u0026rsquo;re diving into the world of Azure AD\u0026rsquo;s authentication system, which can make switching between development and production modes a breeze.\nMuch of this code can readily be found online in documentation and code samples. Because these solutions often \u0026lsquo;just work,\u0026rsquo; it\u0026rsquo;s tempting to fall into the trap of not exploring further to see how they can be enhanced.\nOne of the areas where you can quickly gain traction through online research is setting up Azure services like Key Vault and App Configuration. Typically, you would come across the following configuration:\nusing Azure.Identity; var builder = WebApplication.CreateBuilder(args); if (builder.Environment.IsProduction()) { builder.Configuration.AddAzureKeyVault( new Uri($\u0026#34;https://{builder.Configuration[\u0026#34;KeyVaultName\u0026#34;]}.vault.azure.net/\u0026#34;), new DefaultAzureCredential()); } Now, this is how long the service will take for your service to startup while using the DefaultAzureCredential the DefaultAzureCredential is like your trusty friend, trying out different ways to get you logged in, step by step:\nEnvironmentCredential WorkloadIdentityCredential ManagedIdentityCredential SharedTokenCacheCredential VisualStudioCredential VisualStudioCodeCredential AzureCliCredential AzurePowerShellCredential AzureDeveloperCliCredential InteractiveBrowserCredential But here\u0026rsquo;s the fun part: when you\u0026rsquo;re in development mode (imagine using Azure CLI), it goes through a bit of a treasure hunt, trying out six different methods before it gets there.\nNow, here\u0026rsquo;s where you get to be in charge! Think of it as creating your own playlist of favorite songs. That\u0026rsquo;s what the ChainedTokenCredential lets you do. Check this out:\nusing Azure.Identity; var builder = WebApplication.CreateBuilder(args); if (builder.Environment.IsProduction()) { builder.Configuration.AddAzureKeyVault( new Uri($\u0026#34;https://{builder.Configuration[\u0026#34;KeyVaultName\u0026#34;]}.vault.azure.net/\u0026#34;), new ChainedTokenCredential(new AzureCliCredential(), new DefaultAzureCredential())); } In this setup, we give the Azure CLI credential the spotlight first, and then the other methods follow suit. You can customize it to your heart\u0026rsquo;s content, maybe put ManagedIdentityCredential in the lead (because it\u0026rsquo;s the star in production) or mix things up for different situations. The result? Your project starts up almost a third faster! So there you have it â€“ a friendly tip to make your development journey smoother and more efficient. Ready to give it a try? ðŸ˜ŠðŸš€ðŸ’»\n","permalink":"https://ronneylira.com/posts/chained-token-credential/","summary":"In this article, we\u0026rsquo;ll explore a handy trick that can make your development journey more enjoyable. We\u0026rsquo;re here to share some knowledge and help you understand a clever coding strategy.\nAzure and Dotnet make a fantastic team, offering a bunch of powerful tools that work seamlessly together, making your coding adventures smoother. Today, we\u0026rsquo;re diving into the world of Azure AD\u0026rsquo;s authentication system, which can make switching between development and production modes a breeze.","title":"Chained Token Credential"},{"content":"In this article, I\u0026rsquo;m going to cover handy shortcuts that can make your life in using git in the terminal faster and more convenient.\nI really love using Windows Terminal, it allows you to use any type of shell that you want, customize it, and extend it to the limit of your own imagination. I cannot recommend enough the great article from Scott Hanselman that teaches you how to unlock most of the potential within Windows Terminal, really making it your own.\nOnce you get used to working with the terminal is pretty hard to go back, the speed at which you are used to writing the commands and your own shortcuts make it a flow-like experience to daily work.\nA few of the things that can help you with your daily work are git shortcuts\n#git shortcuts Git shortcuts are just another name for the git configuration file, this being a global git config setup that essentially dictates how git should behave on your dev box.\nthe only thing you need to get started is to open your terminal and type in a command like this one\ngit config --global alias.co checkout this will append a configuration setting in your .git config file and will allow you to replace the ol'\ngit checkout BRANCH_NAME for a simpler\ngit co BRANCH_NAME that might seem small, but you are saving 6 characters multiple times a day. Measure that in a year, or even your professional life.\nlikewise, other commands can be simplified. Here is a list of the ones I use:\nto create a branch git config --global alias.br branch to commit git config --global alias.ci commit to review your current status git config --global alias.st status to check the last commit git config --global alias.last \u0026#39;log -1 HEAD\u0026#39; to cherry-pick a commit\ngit config --global alias.cp cherry-pick if you also unlock the power of WSL you can extend git (and Windows for that matter) with the help of Linux commands and applications in one seamless shortcut:\nto prune and delete old local branches git config --global alias.purge \u0026#39;!git fetch -p \u0026amp;\u0026amp; git branch -vv | awk \u0026#34;/: gone]/{print \\$1}\u0026#34; | xargs git branch -d\u0026#39; with the help of this shortcut\ngit prune you automatically fetch and prune remote branches, list them, send it to Linux\u0026rsquo;s awk to filter out only the pruned ones, and then feed those to the delete command.\njust make sure that you have git, wsl, and a distro with awk installed in your box to make use of this shortcut.\nfor today that\u0026rsquo;s it. thanks for reading.\n","permalink":"https://ronneylira.com/posts/git-shortcuts/","summary":"In this article, I\u0026rsquo;m going to cover handy shortcuts that can make your life in using git in the terminal faster and more convenient.\nI really love using Windows Terminal, it allows you to use any type of shell that you want, customize it, and extend it to the limit of your own imagination. I cannot recommend enough the great article from Scott Hanselman that teaches you how to unlock most of the potential within Windows Terminal, really making it your own.","title":"Git Shortcuts"}]